openapi: 3.0.3
info:
  title: WasaPhoto
  description: |
    WasaPhoto is a photo sharing application that allows users to upload photos and share them with other users.
  version: 1.0.0

tags:
  - name: login
    description: |
      The login tag is used for logging in to the application or to create a new user.
  - name: user
    description: |
      The user tag is used for users' profile related actions, such as changing the username.
  - name: get-profile
    description: |
      The get-profile tag is used for getting the profile of a user.
  - name: photo
    description: |
      The photo tag is used for photo related actions, such as uploading a photo.
  - name: comment
    description: |
      The comment tag is used for comment related actions, such as adding a comment to a photo.
  - name: like
    description: |
      The like tag is used for like related actions, such as liking a photo.
  - name: follow
    description: |
      The follow tag is used for follow related actions, such as following a user.
  - name: ban
    description: |
      The ban tag is used for ban related actions, such as banning a user.
  - name: stream
    description: |
      The stream tag is used for stream related actions, such as getting the stream of a user.

security:
  - bearerAuth: [] # Use bearerAuth security scheme defined below

paths:
  /session:
    post:
      tags: ["login"]
      summary: |
        Login to the application. If the user does not exist, a new user is created, and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: |
            User log-in action successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User/properties/userID'
        '401':
          description: |
            User log-in action failed. The credentials are invalid.
        '403':
          description: |
            User log-in action failed. The user is banned.
        '409':
          description: |
            User log-in action failed. The username is already taken.
        
  /users/{userID}:
    put:
      tags: ["user"]
      summary: Sets the user username.
      description: |
        Sets the user username. The new username must be unique and different from the old username.
      operationId: setMyUserName
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User/properties/username' #the new username has to be given in the request body.
        required: true
      
      responses:
        '200':
          description: |
            User username change successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User/properties/username' #the new username is returned in the response body.
        '401':
          description: |
            User username change failed. The credentials are invalid. 
        '409':
          description: |
            User username change failed. The username is already taken.
        '411':
          description: |
            User username change failed. The username is too long or too short.
  
  /users/{userID}/profile:
    get:
      tags: ["get-profile"]
      summary: Gets the user profile. a.k.a. the users that the user follows, the users that the user has banned, and the photos that the user has uploaded.
      description: |
        Gets the user profile, given an userID.
      operationId: getUserProfile
      parameters:
        - $ref: '#/components/parameters/UserIDPathParam'
      responses:
        '200':
          description: |
            User profile retrieval successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '403':
          description: |
            User profile retrieval failed. The user does not have permission to view this profile.
        '404':
          description: |
            User profile retrieval failed. The user does not exist.
  
  /users/{userID}/photos{photoID}:
    post:
      tags: ["photo"]
      summary: Uploads a photo.
      description: |
        Uploads a photo. The photo must be in .jpg format.
      operationId: uploadPhoto
      requestBody:
        description: Photo and photo details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Photo'
        required: true
      responses:
        '201':
          description: |
            Photo upload successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo/properties/photoID'
        '411':
          description: |
            Photo upload failed. The photo is too large.
        '415':
          description: |
            Photo upload failed. The photo must be in .jpg format.

    delete:
      tags: ["photo"]
      summary: Deletes a photo.
      description: |
        Deletes a photo, given a photoID.
      operationId: deletePhoto
      parameters:
        - $ref: '#/components/parameters/PhotoIDPathParam'
      responses:
        '204':
          description: |
            Photo deletion successful.
        '403':
          description: |
            Photo deletion failed. The user does not have permission to delete this photo.
        '404':
          description: |
            Photo deletion failed. The photo does not exist.
    
  /photo/{photoID}/comment:
    post:
      tags: ["comment"]
      summary: Adds a comment to a photo.
      description: |
        Adds a comment to a photo, given the photoID.
      operationId: commentPhoto
      parameters:
        - $ref: '#/components/parameters/PhotoIDPathParam'
      requestBody:
        description: Comment details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '201':
          description: |
            Comment addition successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment/properties/commentID'
        '403':
          description: |
            Comment addition failed. The user does not have permission to comment this photo.
        '404':
          description: |
            Comment addition failed. The photo does not exist.
    
    delete:
      tags: ["comment"]
      summary: Deletes a comment.
      description: |
        Deletes a comment, given a photoID and a commentID.
      operationId: deleteComment
      parameters:
        - name: commentID
          in: path
          description: |
            The unique ID of the comment.
          required: true
          schema:
            $ref: '#/components/schemas/Comment/properties/commentID'
        - $ref: '#/components/parameters/PhotoIDPathParam'
      responses:
        '204':
          description: |
            Comment deletion successful.
        '403':
          description: |
            Comment deletion failed. The user does not have permission to delete this comment.
        '404':
          description: |
            Comment deletion failed. The comment does not exist.
    
  /photo/{photoID}/likes:
    post:
      tags: ["like"]
      summary: Likes a photo.
      description: |
        Likes a photo, given an username and a photoID. Adds the like to the collection of likes of the photo.
      operationId: likePhoto
      parameters:
        - $ref: '#/components/parameters/UserNamePathParam'
        - $ref: '#/components/parameters/PhotoIDPathParam'
      responses:
        '200':
          description: |
            Photo like successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User/properties/userID' #the userID of the user that liked the photo is returned in the response body.
        '403':
          description: |
            Photo like failed. The user does not have permission to like this photo.
        '404':
          description: |
            Photo like failed. The photo does not exist.

    delete:
      tags: ["like"]
      summary: Unlikes a photo.
      description: |
        Unlikes a photo, given username and a photoID. Removes the like from the collection of likes of the photo.
      operationId: unlikePhoto
      parameters:
        - $ref: '#/components/parameters/UserNamePathParam'
        - $ref: '#/components/parameters/PhotoIDPathParam'
      responses:
        '204':
          description: |
            Photo unlike successful.
        '403':
          description: |
            Photo unlike failed. The user does not have permission to unlike this photo.
        '404':
          description: |
            Photo unlike failed. The photo does not exist.
        '409':
          description: |
            Photo unlike failed. The user has not liked this photo.        

  /users/{userID}/profile/follows/{username}:
    put:
      tags: ["follow"]
      summary: Follows a user.
      description: |
        Follows a user, given the username of the one the user wants to follow.
      operationId: followUser
      parameters:
        - $ref: '#/components/parameters/UserNamePathParam' #the username of the followed
        - $ref: '#/components/parameters/UserIDPathParam' #the userID of the user that wants to follow is given in the path.
      responses:
        '200':
          description: |
            User follow successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User/properties/username' #the userID of the user that is followed is returned in the response body.
        '403':
          description: |
            User follow failed. The user does not have permission to follow this user. The user may be banned.
        '404':
          description: |
            User follow failed. The user does not exist.
  
    delete:
      tags: ["follow"]
      summary: Unfollows a user.
      description: |
        Unfollows a user, given the username of the followed
      operationId: unfollowUser
      parameters:
        - $ref: '#/components/parameters/UserNamePathParam'
        - $ref: '#/components/parameters/UserIDPathParam'
      responses:
        '200':
          description: |
            User unfollow successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User/properties/username' #the username of the user that is unfollowed is returned in the response body.
        '403':
          description: |
            User unfollow failed. The user does not have permission to unfollow this user. The user may be banned.
        '404':
          description: |
            User unfollow failed. The user does not exist.
        '409':
          description: |
            User unfollow failed. The user is not followed by the user that wants to unfollow.

  /users/{userID}/profile/banned/{username}:
    put:
      tags: ["ban"]
      summary: Bans a user.
      description: |
        Bans a user, given the username of the banned.
      operationId: banUser
      parameters:
        - $ref: '#/components/parameters/UserNamePathParam' #the username of the banned
        - $ref: '#/components/parameters/UserIDPathParam' #the userID of the banner
      responses:
        '200':
          description: |
            User ban successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User/properties/username' #the userID of the user that is banned is returned in the response body.
        '403':
          description: |
            User ban failed. The user does not have permission to ban this user. The user may be banned.
        '404':
          description: |
            User ban failed. The user does not exist.
        '409':
          description: |
            User ban failed. The user is already banned.
    
    delete:
      tags: ["ban"]
      summary: Unbans a user.
      description: |
        Unbans a user, given the username of the banned.
      operationId: unbanUser
      parameters:
        - $ref: '#/components/parameters/UserNamePathParam'
        - $ref: '#/components/parameters/UserIDPathParam'
      responses:
        '200':
          description: |
            User unban successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User/properties/username' #the userID of the user that is unbanned is returned in the response body.
        '403':
          description: |
            User unban failed. The user does not have permission to unban this user. The user may be banned.
        '404':
          description: |
            User unban failed. The user does not exist.
        '409':
          description: |
            User unban failed. The user is not banned by the user that wants to unban.

  /users/{userID}/stream:
    get:
      tags: ["stream"]
      summary: Gets the stream of the user.
      description: |
        Gets the stream of the user, given the userID of the user. 
        The stream is the collection of photos of the users that the user follows. He can scroll trough them.
      operationId: getMyStream
      responses:
        '200':
          description: |
            Stream retrieval successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '204':
          description: |
            Stream retrieval failed. The stream is empty.
        '403':
          description: |
            Stream retrieval failed. The user does not have permission to view this stream. The user may be banned.
        '404':
          description: |
            Stream retrieval failed. The user does not exist.
        
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    User:
      type: object
      description: |
        A user of the application.
      properties:
        username:
          type: string
          description: |
            The username of the user. The username must be unique.
          pattern: '^.*?$'
          example: Flavio
          minLength: 3
          maxLength: 16
        userID:
          type: string
          description: |
            The unique ID of the user.
          example: 'abcd1234'
    Profile:
      type: object
      description: |
        The profile of a user.
      properties:
        userID: 
          description: |
            The unique ID of the user.
          $ref: '#/components/schemas/User/properties/userID'
        followed:
          description: |
            The users that the user follows.
          type: array
          minItems: 0
          maxItems: 1000
          items:
            description: |
              The user that the user follows.
            $ref: '#/components/schemas/User'
        banned:
          description: |
            The users that the user has banned.
          type: array
          minItems: 0
          maxItems: 1000
          items:
            description: |
              The user that the user has banned.
            $ref: '#/components/schemas/User'
        photos:
          description: |
            The photos that the user has uploaded.
          type: array
          minItems: 0
          maxItems: 1000
          items:
            description: |
              The photo that the user has uploaded.
            $ref: '#/components/schemas/Photo'
    Photo:
      description: |
        Every photo that is uploaded to the application.
      type: object
      properties:
        photo:
          description: |
            The photo that is uploaded.
          type: string
          format: binary
        photoID:
          description: |
            The unique ID of the photo.
          example: 'abcd1234'
        userID:
          description: |
            The unique ID of the user that uploaded the photo.
          $ref: '#/components/schemas/User/properties/userID'
        comment:
          description: |
            The comment that the user has written for the photo.
          $ref: '#/components/schemas/Comment'
        photoDate:
          description: |
            The date when the photo was uploaded.
          type: string
          format: date
          example: '2021-04-20'
        likes:
          description: |
            The users that have liked the photo.
          type: array
          minItems: 0
          maxItems: 1000
          items:
            description: |
              The user that has liked the photo.
            $ref: '#/components/schemas/User'
    Comment:
      description: |
        The comment that the user has written for the photo.
      type: object
      properties:
        commentText:
          description: |
            The comment that the user has written for the photo.
          type: string
          example: 'This is a comment'
        commentID:
          description: |
            The unique ID of the comment.
          example: 'abcd1234'
        userID:
          description: |
            The unique ID of the user that wrote the comment.
          $ref: '#/components/schemas/User/properties/userID'
        commentDate:
          description: |
            The date when the comment was written.
          type: string
          format: date
          example: '2021-04-20'
        photoID:
          description: |
            The unique ID of the photo that the comment is written for.
          $ref: '#/components/schemas/Photo/properties/photoID'

  parameters:
    UserIDPathParam:
      name: userID
      in: path
      description: |
        The unique ID of the user.
      required: true
      schema:
        $ref: '#/components/schemas/User/properties/userID'
    
    UserNamePathParam:
      name: username
      in: path
      description: |
        The username of the followed one
      required: true
      schema:
        $ref: '#/components/schemas/User/properties/username'
    
    PhotoIDPathParam:
      name: photoID
      in: path
      description: |
        The unique ID of the photo.
      required: true
      schema:
        $ref: '#/components/schemas/Photo/properties/photoID'



