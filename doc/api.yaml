openapi: 3.0.0
info:
    description: Wasa_photo REST API
    title: Wasa_photo
    version: 1.0.0


#Components are User, Profile, Photo and Comment. These defines the objects that are used in the API. 
components:
    schemas:
        User:
            title: User
            description: |
                This object represents a single User
            type: object
            properties:    
                username:
                    description: The user's username
                    type: string
                    example: Flavio
                    pattern: '^.*?$' 
                    minLength: 3
                    maxLength: 16
                userID:
                    description: The user's ID
                    type: string
                    example: 'abcde12345'
                profile:
                    $ref : '#/components/schemas/Profile'
        
        Profile:
            title: Profile
            description: |
                This object represents the profile of a user. It contains the userID, the followed number 
                and the photos list.
            type: object
            properties:
                userID: 
                    $ref: '#/components/schemas/User/properties/userID' 
                followed:
                    description: The list of users followed by the user 
                    type: array
                    items:
                        $ref: '#/components/schemas/User/properties/username'                        
                banned:
                    description: The list of users banned by the user
                    type: array
                    items:
                        $ref: '#/components/schemas/User/properties/username'
                photos:
                    description: The list of photos uploaded by the user
                    type: array
                    items:
                        $ref: '#/components/schemas/Photo/properties/photoID'
        Photo:
            title: Photo
            description: |
                This object represents a single Photo
            type: object
            properties:
                photo:
                    description: The photo
                    type: string
                    format: binary
                photoID:
                    description: The photo's ID
                    type: string
                    example: 'abcde12345'
                photoDate:
                    description: The photo's date of publication
                    type: string
                    example: '2020-12-12'
                    format: date
                comment: 
                    description: The list of comments made to the photo
                    type: array
                    items:
                        $ref: '#/components/schemas/Comment'
                like:
                    description: List of the users that liked the photo
                    type: array
                    items:
                        $ref: '#/components/schemas/User/properties/userID'
        Comment:
            title: Comment
            description: |
                This object represents a single Comment
            type: object
            properties:
                commentID: 
                    description: The comment's ID
                    type: string
                    example: 'abcde12345'
                commentDate:
                    description: The comment's date of publication
                    type: string
                    example: '2020-12-12'
                    format: date
                commentText:
                    type: string
                    example: 'This is a comment'
                userID: #User that has made the comment
                    $ref: '#/components/schemas/User/properties/userID'
                photoID: #Photo that has been commented
                    $ref: '#/components/schemas/Photo/properties/photoID'
paths:
    /session:
        post:
            tags: ["login"]    
            summary: Logs in the user
            description: |
                If the user does not exists, it will be created, an an identifier is returned.
                If the user exists, the user identifier is returned.
            operationId: doLogin
            requestBody:
                description: User details
                content: 
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User/properties/username'
                required: true
            responses:
                "201":
                    description: User log-in action successful
                    content:
                        application/json:
                            schema: 
                                $ref: '#/components/schemas/User/properties/userID'
                "411":
                    description: Username too short or too long
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: Username too short or too long
    /users/{userID}:
        put:
            tags: ["user"]
            summary: Sets the user username
            description: |
                Sets the user username, given a userID.
                If the userID has already a username, it will be overwritten.
            operationId: setMyUserName
            parameters:
                - $ref: '#/components/schemas/User/properties/userID'
            requestBody:
                description: User details
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User/properties/username' #the new username
            responses:
                "200":
                    description: Username set successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User/properties/username' #returns the new username
                "409":
                    description: Username already exists
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: Username already exists

                "411":
                    description: Username too short or too long
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: Username too short or too long        

    /users/{userID}/profile:
        get: #gets the user profile given a userID, profile is a component
            tags: ["get-profile"]
            summary: Gets the user profile
            description: |
                Gets the user profile, given a userID.
            operationId: getUserProfile
            parameters:
                - $ref: '#/components/schemas/User/properties/userID'
            responses:
                "200":
                    description: Profile retrieved successfully
                    content:
                        application/json:
                            schema: 
                                $ref: '#/components/schemas/Profile'
                "404":
                    description: User not found
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: User not found
                "409":  
                    description: Banned by the user
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: You were banned by the user

    /users/{userID}/photos:
        post: #uploads a photo given a userID, photo is a component. The ref of photo should be the same as the one in the photo component
            tags: ["photo"]
            summary: Uploads a photo
            description: |
                Uploads a photo, given a userID.
            operationId: uploadPhoto
            parameters:
                - $ref: '#/components/schemas/User/properties/userID'
                  required: true
            requestBody:
                content:
                    image/png:
                        schema:
                            $ref: '#/components/schemas/Photo/properties/photo'
            responses:
                "200":
                    description: Photo uploaded successfully
                    content:
                        application/json: ###sistema qui
                            schema: 
                                $ref: '#/components/schemas/Photo'             
                "406":
                    description: Photo not valid
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: Photo not valid
        delete:
            tags: ["photo"]
            summary: Deletes a photo
            description: |
                Deletes a photo, given a userID and a photoID.
            operationId: deletePhoto
            parameters:
              - $ref: '#/components/schemas/User/properties/userID'
                required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Photo'
            responses:
                "204":
                    description: Photo deleted successfully
                
                "404":
                    description: Photo not found
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: Photo not found
    
    /photos/{photoID}/comments:
        post:
            tags: ["comment"]
            summary: Adds a comment to a photo
            description: |
                Adds a comment to a photo, given a photoID and a userID.
            operationId: commentPhoto
            parameters:
                - $ref: '#/components/schemas/Photo/properties/photoID'
                  required: true
                - $ref: '#/components/schemas/User/properties/userID'
                  required: true
            requestBody:
                content:
                    application/json:
                        schema:
                          $ref: '#/components/schemas/Comment/properties/commentText'
            responses:
                "200":
                    description: Comment added successfully
                    content:
                        application/json:
                            schema: 
                                $ref: '#/components/schemas/Comment'
                "404":
                    description: Photo not found
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: Photo not found
                "406":
                    description: Comment not valid
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: Comment not valid
        delete:
            tags: ["comment"]
            summary: deletes a comment from a photo
            description: |
                deletes a comment from a photo, given a photoID and a commentID.
            operationId: uncommentPhoto
            parameters:
              - $ref: '#/components/schemas/Photo/properties/photoID'
                required: true
              - $ref: '#/components/schemas/Comment/properties/commentID'
                required: true
            responses:
                "204":
                    description: Comment deleted successfully
                "404":
                    description: Comment not found
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: Comment not found                    

    /user/{userID}/profile/follow:
        post:
            tags: ["follow"]
            summary: Follow a new user
            description: |
                Follow a new user, given your userID and a username to follow.
            operationId: followUser
            parameters:
                - $ref: '#/components/schemas/User/properties/userID'
                  required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User/properties/username' #the username of the user to follow
            responses:
                "200":
                    description: User followed successfully
                    content:
                        application/json:
                            schema: 
                                $ref: '#/components/schemas/User/properties/username'
                "404":  
                    description: User not found
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: User not found
                "409":
                    description: banned by the user
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: You were banned by the user
        delete:
            tags: ["follow"]
            summary: Unfollow a user
            description: |
                Unfollow a user, given your userID and a username to unfollow.
            operationId: unfollowUser
            parameters:
                - $ref: '#/components/schemas/User/properties/userID'
                  required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User/properties/username'
            responses:
                "200":
                    description: User unfollowed successfully
                    content:
                        application/json:
                            schema: 
                                $ref: '#/components/schemas/User/properties/username'
                "404":
                    description: User not found
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: User not found

    /user/{userID}/profile/ban:
        post:
            tags: ["ban"]
            summary: Ban a user
            description: |
                Ban a user, given your userID and a username to ban.
            operationId: banUser
            parameters:
              - $ref: '#/components/schemas/User/properties/userID'
                required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User/properties/username'
            responses:
                "200":
                    description: User banned successfully
                    content:
                        application/json:
                            schema: 
                                $ref: '#/components/schemas/User/properties/username'
                "404":
                    description: User not found
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: User not found        
        delete:
            tags: ["ban"]
            summary: Unban a user
            description: |
                Unban a user, given your userID and a username to unban.
            operationId: unbanUser
            parameters:
              - $ref: '#/components/schemas/User/properties/userID'
                required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User/properties/username'
            responses:
                "200":    
                    description: User unbanned successfully
                    content:
                        application/json:
                            schema: 
                                $ref: '#/components/schemas/User/properties/username'
                "404":
                    description: User not found
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: User not found 
                "409":
                    description: User not banned
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: User not banned
                                
    /photo/{photoID}/likes:
        post:
            tags: ["like"]
            summary: Photo liked by a user
            description: |
                Add a user to the list of users that liked a photo, considering the userID and photoID
            operationId: likePhoto
            parameters:
              - $ref: '#/components/schemas/Photo/properties/photoID'
                required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User/properties/userID'
            responses:
                "200":
                    description: Photo liked successfully
                    content:
                        application/json:
                            schema: 
                                $ref: '#/components/schemas/User/properties/userID'
                "404":  
                    description: Photo not found
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: Photo not found
        delete:
            tags: ["like"]
            summary: Photo unliked by a user
            description: |
                Remove a user from the list of users that liked a photo, considering the userID and photoID
            operationId: unlikePhoto
            parameters:
              - $ref: '#/components/schemas/Photo/properties/photoID'
                required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User/properties/userID'
            responses:
                "200":
                    description: Photo unliked successfully
                    content:
                        application/json:
                            schema: 
                                $ref: '#/components/schemas/User/properties/userID'
                "409":
                    description: Photo not liked by the user
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: Photo not liked by the user

    /user/{userID}/stream:
        get:
            tags: ["stream"]
            summary: Get the stream of a user
            description: |
                Get the stream of a user, given the userID
            operationId: getStream
            parameters:
              - $ref: '#/components/schemas/User/properties/userID'
                required: true
            responses:
                "200":
                    description: Stream retrieved successfully
                    content:
                        application/json:
                            schema: 
                                type: array
                                items:
                                    $ref: '#/components/schemas/Photo'
                "404":
                    description: User not found
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: User not found
                "409":
                    description: Banned by the user
                    content:
                        application/json:
                            schema: 
                                type : string
                                example: You were banned by the user

